/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * DnD
 * The DnD API description
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { customInstance } from "../../../../lib/fetch";
import type { GetUserGameStateOutputDto } from "../../model";

export const gamePrivateControllerGetUserGameState = (
  gameId: string,
  signal?: AbortSignal,
) => {
  return customInstance<GetUserGameStateOutputDto>({
    url: `/game/private/get-user-game-state/${gameId}`,
    method: "GET",
    signal,
  });
};

export const getGamePrivateControllerGetUserGameStateQueryKey = (
  gameId: string,
) => {
  return [`/game/private/get-user-game-state/${gameId}`] as const;
};

export const getGamePrivateControllerGetUserGameStateQueryOptions = <
  TData = Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
  TError = unknown,
>(
  gameId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGamePrivateControllerGetUserGameStateQueryKey(gameId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>
  > = ({ signal }) => gamePrivateControllerGetUserGameState(gameId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!gameId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GamePrivateControllerGetUserGameStateQueryResult = NonNullable<
  Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>
>;
export type GamePrivateControllerGetUserGameStateQueryError = unknown;

export function useGamePrivateControllerGetUserGameState<
  TData = Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
  TError = unknown,
>(
  gameId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGamePrivateControllerGetUserGameState<
  TData = Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
  TError = unknown,
>(
  gameId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGamePrivateControllerGetUserGameState<
  TData = Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
  TError = unknown,
>(
  gameId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGamePrivateControllerGetUserGameState<
  TData = Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
  TError = unknown,
>(
  gameId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof gamePrivateControllerGetUserGameState>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGamePrivateControllerGetUserGameStateQueryOptions(
    gameId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
