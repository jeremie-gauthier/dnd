/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * DnD
 * The DnD API description
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { customInstance } from "../../../../lib/fetch";

export const appControllerHealthCheck = (signal?: AbortSignal) => {
  return customInstance<string>({ url: "/", method: "GET", signal });
};

export const getAppControllerHealthCheckQueryKey = () => {
  return ["/"] as const;
};

export const getAppControllerHealthCheckQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerHealthCheck>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerHealthCheck>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAppControllerHealthCheckQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerHealthCheck>>
  > = ({ signal }) => appControllerHealthCheck(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerHealthCheck>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type AppControllerHealthCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerHealthCheck>>
>;
export type AppControllerHealthCheckQueryError = unknown;

export function useAppControllerHealthCheck<
  TData = Awaited<ReturnType<typeof appControllerHealthCheck>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerHealthCheck>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof appControllerHealthCheck>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useAppControllerHealthCheck<
  TData = Awaited<ReturnType<typeof appControllerHealthCheck>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerHealthCheck>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof appControllerHealthCheck>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useAppControllerHealthCheck<
  TData = Awaited<ReturnType<typeof appControllerHealthCheck>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerHealthCheck>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useAppControllerHealthCheck<
  TData = Awaited<ReturnType<typeof appControllerHealthCheck>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerHealthCheck>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getAppControllerHealthCheckQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
