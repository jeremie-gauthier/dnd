/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * DnD
 * The DnD API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { customInstance } from "../../../../lib/fetch";
import type {
  GetCampaignOutputDto,
  GetHeroDetailsOutputDto,
  NewCampaignStartedInputDto,
  NewCampaignStartedOutputDto,
} from "../../model";

export const campaignPrivateControllerNewCampaignStarted = (
  newCampaignStartedInputDto: NewCampaignStartedInputDto,
  signal?: AbortSignal,
) => {
  return customInstance<NewCampaignStartedOutputDto>({
    url: "/campaign/private/new-campaign-started",
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: newCampaignStartedInputDto,
    signal,
  });
};

export const getCampaignPrivateControllerNewCampaignStartedMutationOptions = <
  TData = Awaited<
    ReturnType<typeof campaignPrivateControllerNewCampaignStarted>
  >,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NewCampaignStartedInputDto },
    TContext
  >;
}) => {
  const mutationKey = ["campaignPrivateControllerNewCampaignStarted"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof campaignPrivateControllerNewCampaignStarted>>,
    { data: NewCampaignStartedInputDto }
  > = (props) => {
    const { data } = props ?? {};

    return campaignPrivateControllerNewCampaignStarted(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: NewCampaignStartedInputDto },
    TContext
  >;
};

export type CampaignPrivateControllerNewCampaignStartedMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof campaignPrivateControllerNewCampaignStarted>>
  >;
export type CampaignPrivateControllerNewCampaignStartedMutationBody =
  NewCampaignStartedInputDto;
export type CampaignPrivateControllerNewCampaignStartedMutationError = unknown;

export const useCampaignPrivateControllerNewCampaignStarted = <
  TData = Awaited<
    ReturnType<typeof campaignPrivateControllerNewCampaignStarted>
  >,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NewCampaignStartedInputDto },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { data: NewCampaignStartedInputDto },
  TContext
> => {
  const mutationOptions =
    getCampaignPrivateControllerNewCampaignStartedMutationOptions(options);

  return useMutation(mutationOptions);
};
export const campaignPrivateControllerGetCampaigns = (signal?: AbortSignal) => {
  return customInstance<GetCampaignOutputDto[]>({
    url: "/campaign/private/get-campaigns",
    method: "GET",
    signal,
  });
};

export const getCampaignPrivateControllerGetCampaignsQueryKey = () => {
  return ["/campaign/private/get-campaigns"] as const;
};

export const getCampaignPrivateControllerGetCampaignsQueryOptions = <
  TData = Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCampaignPrivateControllerGetCampaignsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>
  > = ({ signal }) => campaignPrivateControllerGetCampaigns(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type CampaignPrivateControllerGetCampaignsQueryResult = NonNullable<
  Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>
>;
export type CampaignPrivateControllerGetCampaignsQueryError = unknown;

export function useCampaignPrivateControllerGetCampaigns<
  TData = Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useCampaignPrivateControllerGetCampaigns<
  TData = Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useCampaignPrivateControllerGetCampaigns<
  TData = Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useCampaignPrivateControllerGetCampaigns<
  TData = Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof campaignPrivateControllerGetCampaigns>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions =
    getCampaignPrivateControllerGetCampaignsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const campaignPrivateControllerGetHeroDetails = (
  heroId: string,
  signal?: AbortSignal,
) => {
  return customInstance<GetHeroDetailsOutputDto>({
    url: `/campaign/private/get-hero-details/${heroId}`,
    method: "GET",
    signal,
  });
};

export const getCampaignPrivateControllerGetHeroDetailsQueryKey = (
  heroId: string,
) => {
  return [`/campaign/private/get-hero-details/${heroId}`] as const;
};

export const getCampaignPrivateControllerGetHeroDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
  TError = unknown,
>(
  heroId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCampaignPrivateControllerGetHeroDetailsQueryKey(heroId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>
  > = ({ signal }) => campaignPrivateControllerGetHeroDetails(heroId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!heroId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type CampaignPrivateControllerGetHeroDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>
>;
export type CampaignPrivateControllerGetHeroDetailsQueryError = unknown;

export function useCampaignPrivateControllerGetHeroDetails<
  TData = Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
  TError = unknown,
>(
  heroId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useCampaignPrivateControllerGetHeroDetails<
  TData = Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
  TError = unknown,
>(
  heroId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useCampaignPrivateControllerGetHeroDetails<
  TData = Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
  TError = unknown,
>(
  heroId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useCampaignPrivateControllerGetHeroDetails<
  TData = Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
  TError = unknown,
>(
  heroId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof campaignPrivateControllerGetHeroDetails>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getCampaignPrivateControllerGetHeroDetailsQueryOptions(
    heroId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
